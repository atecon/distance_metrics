<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="distances" no-data-ok="true" minver="2020e">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.1</version>
<date>2021-10-17</date>
<description>Compute pairwise distance metrics.</description>
<tags>C10</tags>
<help>
This package supplies functions for computing distances between points in multidimensional space. It's inspired by sklearn's metrics.pairwise class for Python:
https://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics.pairwise



PUBLIC FUNCTIONS:

-----------------------------------------------------------------------
Function:       distance_euclidean (const matrix X , const matrix Y,
                                    const bool squared[FALSE])

Description:    Compute the Euclidean distances. If the first matrix X is of
                size N×M, and the second matrix, Y, is of size K×M, then the
                distance matrix, D, will be N×K.

Arguments:
X:              matrix, dimension NxM
Y:              matrix, dimension KxM
squared:        bool, Compute squared distances if TRUE(=1), otherwise
                take the squareroot if FALSE (=0) (default)

Return:
Matrix of dimension NxK with the Euclidean distances for each observation (rows) and for each of the K M-dimensional points (columns).
For details see here:
1. https://www.dabblingbadger.com/blog/2020/2/27/implementing-euclidean-distance-matrix-calculations-from-scratch-in-python
2. https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.euclidean_distances.html#sklearn.metrics.pairwise.euclidean_distances
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       distance_manhattan (const matrix X , const matrix Y)

Description:    Compute the Manhattan distances. If the first matrix X is of
                size N×M, and the second matrix, Y, is of size K×M, then the
                distance matrix, D, will be N×K.

Arguments:
X:              matrix, dimension NxM
Y:              matrix, dimension KxM


Return:
Matrix of dimension NxK with the distances for each observation (rows) and for each of the K M-dimensional points (columns).
For details see here:
https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.manhattan_distances.html
-----------------------------------------------------------------------



Changelog:
- v0.1, October 2021
    + initial release
</help>
<gretl-function name="distance_manhattan" type="matrix">
 <params count="2">
  <param name="X" type="matrix" const="true">
<description>Features</description>
  </param>
  <param name="Y" type="matrix" const="true">
<description>Centroids</description>
  </param>
 </params>
<code>/* Compute the Manhattan distances for each observation of X.
Each column in both X and Y refer to some p-dimensional point. Each row in X refers to some observation. And each row in Y refers to some different p-dimension point for which to compute the distance from. If the first matrix X is of size N×M, and the second matrix Y is of size K×M, then the distance matrix, D, will be N×K.
See here: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.manhattan_distances.html
return: matrix, Distances for each observation (rows) with dimension NxK. */
scalar n_clusters = rows(Y)
matrix m = mshape(NA, rows(X), rows(Y))
# TODO: Is this loop avoidable?
loop i=1..rows(Y)
  m[,i] = sumr(abs(X .- Y[i, ]))
endloop
return m
</code>
</gretl-function>
<gretl-function name="distance_euclidean" type="matrix">
 <params count="3">
  <param name="X" type="matrix" const="true">
<description>Features</description>
  </param>
  <param name="Y" type="matrix" const="true">
<description>Centroids</description>
  </param>
  <param name="squared" type="bool" default="0" const="true">
<description>Return squared distances</description>
  </param>
 </params>
<code>/* Compute the euclidean distances. If the first matrix X is of size N×M, and the second matrix ,Y , is of size K×M, then the distance matrix, D, will be N×K.
See here: https://www.dabblingbadger.com/blog/2020/2/27/implementing-euclidean-distance-matrix-calculations-from-scratch-in-python
and here: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.euclidean_distances.html#sklearn.metrics.pairwise.euclidean_distances
return: matrix, Distances for each observation (rows) with dimension NxK */
scalar n_clusters = rows(Y)
D1 = sumr(X .^ 2) * ones(1, n_clusters)
D2 = ones(rows(X), 1) * sumr(Y .^2)'
D3 = 2 .* (X * Y')
distances = D1 + D2 - D3
/*
# This yields exactly the same results - but uses a loop
matrix distances = mshape(NA, rows(X), n_clusters)
loop j=1..n_clusters               # compute distances from each centroid
  z = X .- Y[j,]   # deviations from centroid
  distances[,j] = sumr(z.^2)
endloop
*/
if squared
  return distances
else
  return sqrt(distances)
endif
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include distances.gfn

matrix X = {1, 2; 3, 4}
matrix Y = {1, 2; 0, 3}
print X Y

print &quot;Euclidean distances (squareroot)&quot;
eval distance_euclidean(X, Y)
print &quot;Euclidean distances (squared)&quot;
eval distance_euclidean(X, Y, TRUE)

print &quot;Manhattan distances&quot;
eval distance_manhattan(X, Y)
</sample-script>
</gretl-function-package>
</gretl-functions>
