set verbose off
clear

set assert stop
include assertion.gfn

include "./src/distances.inp" --force


bundles Params = null
features1 = {3}
features2 = {1, 2; 3, 4}
Params = Params + _(features = features1,\
                    centroids = {3},\
                    expected_distances = {0}\
                    )
Params = Params + _(features = features1,\
                    centroids = {2},\
                    expected_distances = {1}\
                    )
Params = Params + _(features = features1,\
                    centroids = {4},\
                    expected_distances = {1}\
                    )
Params = Params + _(features = features2,\
                    centroids = {1, 2; 0, 3},\
                    expected_distances = {0, 2; 4, 4}\
                    )

function void test_distance_manhattan (const bundles P)
    print "Start testing function distance_manhattan()."

    loop foreach i P
        # Given
        matrix expected_distances = vec(P[i].expected_distances)

        # When
        matrix actual = distance_manhattan(P[i].features, P[i].centroids)
        actual = vec(actual)

        # Then
        loop j=1..rows(expected_distances)
            assert(actual[j] == expected_distances[j])
        endloop
    endloop
end function
test_distance_manhattan(Params)


bundles Params = null
matrix features1 = {0, 1; 1, 1}
matrix features2 = {0, 1; 0, 1}

Params = Params + _(features = features1,\
                    centroids = features1,\
                    expected_distances = {0, 1; 1, 0},\
                    squared = FALSE\
                    )
Params = Params + _(features = features2,\
                    centroids = features2,\
                    expected_distances = {0, 0; 0, 0},\
                    squared = FALSE\
                    )

Params = Params + _(features = features1,\
                    centroids = {0, 0},\
                    expected_distances = {1, sqrt(2)},\
                    squared = FALSE\
                    )
Params = Params + _(features = features1,\
                    centroids = {0, 0},\
                    expected_distances = {1, 2},\
                    squared = TRUE\
                    )

function void test_distance_euclidean (const bundles P)
    print "Start testing function distance_euclidean()."

    loop foreach i P
        # Given
        matrix expected_distances = vec(P[i].expected_distances)

        # When
        matrix actual = distance_euclidean(P[i].features, P[i].centroids, P[i].squared)
        actual = vec(actual)

        # Then
        loop j=1..rows(expected_distances)
            assert(actual[j] == expected_distances[j])
        endloop
    endloop
end function
test_distance_euclidean(Params)


print "Finished all tests succesfully."
quit
